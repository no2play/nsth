//##########START BYPASS PROXY FOR MICROSOFT 365 TRAFFIC FUNCTION##########
//The following code block between the start and end tags is auto-generated by SWG. DO NOT change it manually.
//Otherwise, this function or the PAC file will not work properly.
function skip_office365(host){
    var Office365Hosts = [
        "*.msftidentity.com",
        "protection.office.com",
        "device.login.microsoftonline.com",
        "compliance.microsoft.com",
        "nexus.microsoftonline-p.com",
        "outlook.office.com",
        "office.live.com",
        "account.activedirectory.windowsazure.com",
        "*.msidentity.com",
        "*.mx.microsoft",
        "graph.microsoft.com",
        "smtp.office365.com",
        "outlook.office365.com",
        "loginex.microsoftonline.com",
        "*.lync.com",
        "api.passwordreset.microsoftonline.com",
        "companymanager.microsoftonline.com",
        "login.microsoft.com",
        "*.online.office.com",
        "logincert.microsoftonline.com",
        "*.sharepoint.com",
        "login-us.microsoftonline.com",
        "becws.microsoftonline.com",
        "provisioningapi.microsoftonline.com",
        "teams.microsoft.com",
        "*.teams.microsoft.com",
        "passwordreset.microsoftonline.com",
        "*.auth.microsoft.com",
        "security.microsoft.com",
        "graph.windows.net",
        "*.mail.protection.outlook.com",
        "adminwebservice.microsoftonline.com",
        "login.microsoftonline.com",
        "*.compliance.microsoft.com",
        "login.microsoftonline-p.com",
        "clientconfig.microsoftonline-p.net",
        "autologon.microsoftazuread-sso.com",
        "*.protection.office.com",
        "*.protection.outlook.com",
        "accounts.accesscontrol.windows.net",
        "*.officeapps.live.com",
        "login.windows.net",
        "*.security.microsoft.com",
        "defender.microsoft.com",
        "ccs.login.microsoftonline.com",
        "outlook.cloud.microsoft",
        "purview.microsoft.com"
    ];
    for (var i in Office365Hosts) {
        if (shExpMatch(host, Office365Hosts[i])) {
            return true;
        }
    }
    return false;
}
//##########END BYPASS PROXY FOR MICROSOFT 365 TRAFFIC FUNCTION##########
//SWG pac file
function islocalip(ip) {
    return isInNet(ip, "127.0.0.0", "255.0.0.0") || 
           isInNet(ip, "169.254.0.0", "255.255.0.0") || 
           isInNet(ip, "10.0.0.0", "255.0.0.0") || 
           //The following is used by the private access service. Do not change or delete it.
           isInNet(ip, "100.64.0.0", "255.255.0.0") || 
           isInNet(ip, "172.16.0.0", "255.240.0.0");
}

function FindProxyForURL(url, host) {
//##########START BYPASS PROXY FOR MICROSOFT 365 TRAFFIC MAIN##########
    var skip_office365_traffic = true;
    var skip_office365_proxy = 'DIRECT';
    if (skip_office365(host) && skip_office365_traffic) {
        return skip_office365_proxy;
    }
//##########END BYPASS PROXY FOR MICROSOFT 365 TRAFFIC MAIN##########

    //Configure Proxy Chaining here
    var ServiceGW = "PROXY v1sg.70938072:8088; PROXY 192.168.1.20:8088; DIRECT";
    var DefaultScanner = "PROXY proxy.ztsa-iag.trendmicro.com:80; PROXY 192.168.1.20:8088; DIRECT";
    var HTTPSScanner   = "PROXY proxy.ztsa-iag.trendmicro.com:80; PROXY 192.168.1.20:8088; DIRECT";
    var FTPScanner     = "DIRECT";

    //The following is used by the private access service. Do not change or delete it.
    var DNSNeedResolve = true;
    var SkipHosts = ["windowsupdate.microsoft.com", "*.windowsupdate.microsoft.com", "*.update.microsoft.com", "*.windowsupdate.com", "download.microsoft.com", "ntservicepack.microsoft.com", "officecdn.microsoft.com", "officecdn.microsoft.com.edgesuite.net"];
    
    if (isPlainHostName(host)) {
        return "DIRECT";
    }
    for (var i in SkipHosts) {
        if (shExpMatch(host, SkipHosts[i])) {
            return 'DIRECT';
        }
    }
    if (/\d+\.\d+\.\d+\.\d+/.test(host)) {
        if (islocalip(host)) {
            return 'DIRECT';
        }
    } else if (DNSNeedResolve && isResolvable(host)) {
        if (islocalip(dnsResolve(host))) {
            return 'DIRECT';
        }
    }
    // ftp URL
    if (url.substring(0, 3) == "ftp") {
        return FTPScanner;
    }
    // https URL
    else if (url.substring(0, 5) == "https") {
        return HTTPSScanner;
    }
    // other URLs
    else {
        return DefaultScanner;
    }
}
